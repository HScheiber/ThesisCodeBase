function [XC_Func,HFX,mGGA] = cp2k_XC_Func(XC_Func_Name,vdw_cutoff,hfx,smoothing,finer_grid)

% Possible XC Functionals
% PBE
% PBE-D3(BJ)
% PBE-rVV10
% PBE-rVV10L

% PBEsol
% PBEsol-rVV10

% LV-PW86r or cx
% vdW-DF-cx or LV-PW86r-vdw

% cx0p [hybrid]
% vdW-DF-cx0p [hybrid]

% optB88
% optB88-vdW

% optPBE
% optPBE-vdW

% optB86b [requires libXC version 5.0]
% optB86b-vdW [requires libXC version 5.0]

% PBEk=1
% PBEk=1-vdW

% c09
% c09-vdW

% revPBE
% revPBEx (LDA correlation)
% vdW-dF or revPBEx-vdw

% B86r (LDA correlation)
% rev-vdW-DF2 or B86r-vdW-DF2

% PW86r (LDA correlation)
% vdW-DF2 or PW86r-vdW-DF2
% rVV10 or PW86r-rVV10

% BEEF [known as BEEFVDW but without the vdW correction]
% BEEF-vdW (Note this uses vdW-DF2 type correction)

% wb97  [long range only hybrid]
% wb97x [hybrid]
% wB97X-rV [hybrid]

% SCAN
% SCAN-rVV10

% AM05
% AM05-VV10sol

% SG4
% SG4-rVV10m

% TMTPSS
% TMTPSS-rVV10L

% For hybrid functionals, must specify the following
% hfx.eps_schwarz
% hfx.max_memory
% hfx.cutoff_radius

% Defaults
if nargin <= 4
    finer_grid = false;
end
if nargin <= 3
    smoothing = false;
end
if nargin <= 2
    hfx.eps_schwarz = 1e-9; % unitless
    hfx.max_memory = 3800; % MiB
    hfx.cutoff_radius = 6; % Angstrom
end
if nargin <= 1
    vdw_cutoff = 500; % default
end

HFX = false;
mGGA = false;

switch lower(XC_Func_Name)
    case 'pbe'
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL PBE' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '	 &END XC'];
    case {'pbe-d3' 'pbe-d3(bj)'}
        XC_Func =  ['    &XC' newline ...
                    '       &XC_FUNCTIONAL PBE' newline ...
                    '       &END XC_FUNCTIONAL' newline ...
                    '       &VDW_POTENTIAL' newline ...
                    '         POTENTIAL_TYPE PAIR_POTENTIAL' newline ...
                    '         &PAIR_POTENTIAL' newline ...
                    '           R_CUTOFF   25.1359' newline ...
                    '           TYPE  DFTD3(BJ)' newline ...
                    '           PARAMETER_FILE_NAME dftd3.dat' newline ...
                    '           REFERENCE_FUNCTIONAL PBE' newline ...
                    '           EPS_CN     1.00000000E-006' newline ...
                    '           CALCULATE_C9_TERM  F' newline ...
                    '           REFERENCE_C9_TERM  F' newline ...
                    '           LONG_RANGE_CORRECTION  F' newline ...
                    '           VERBOSE_OUTPUT  F' newline ...
                    '         &END PAIR_POTENTIAL' newline ...
                    '       &END VDW_POTENTIAL' newline ...
                    '    &END XC'];
    case 'pbe-rvv10'
        XC_Func =  ['    &XC' newline ...
                    '       &XC_FUNCTIONAL PBE' newline ...
                    '       &END XC_FUNCTIONAL' newline ...
                    '	  &vdW_POTENTIAL ' newline ...
                    '		DISPERSION_FUNCTIONAL NON_LOCAL ' newline ...
                    '		&NON_LOCAL ' newline ...
                    '			TYPE RVV10 ' newline ...
                    '			PARAMETERS 6.6 0.0093 ' newline ...
                    '			KERNEL_FILE_NAME rVV10_kernel_table.dat ' newline ...
                    '           CUTOFF ' num2str(vdw_cutoff) newline ...
                    '		&END NON_LOCAL ' newline ...
                    '	  &END vdW_POTENTIAL ' newline ...
                    '    &END XC'];
    case 'pbe-rvv10l'
        XC_Func =  ['    &XC' newline ...
                    '       &XC_FUNCTIONAL PBE' newline ...
                    '       &END XC_FUNCTIONAL' newline ...
                    '	  &vdW_POTENTIAL ' newline ...
                    '		DISPERSION_FUNCTIONAL NON_LOCAL ' newline ...
                    '		&NON_LOCAL ' newline ...
                    '			TYPE RVV10 ' newline ...
                    '			PARAMETERS 10.0 0.0093 ' newline ...
                    '			KERNEL_FILE_NAME rVV10_kernel_table.dat ' newline ...
                    '           CUTOFF ' num2str(vdw_cutoff) newline ...
                    '		&END NON_LOCAL ' newline ...
                    '	  &END vdW_POTENTIAL ' newline ...
                    '    &END XC'];
    case 'pbesol'
        XC_Func =  ['    &XC' newline ...
                    '       &XC_FUNCTIONAL' newline ...
                    '         &PBE' newline ...   
                    '          PARAMETRIZATION PBESOL' newline ...
                    '         &END PBE' newline ...   
                    '       &END XC_FUNCTIONAL' newline ...
                    '    &END XC'];
    case 'pbesol-rvv10'
        XC_Func =  ['    &XC' newline ...
                    '       &XC_FUNCTIONAL PBE' newline ...
                    '         &PBE' newline ...   
                    '          PARAMETRIZATION PBESOL' newline ...
                    '         &END PBE' newline ...   
                    '       &END XC_FUNCTIONAL' newline ...
                    '	  &vdW_POTENTIAL ' newline ...
                    '		DISPERSION_FUNCTIONAL NON_LOCAL ' newline ...
                    '		&NON_LOCAL ' newline ...
                    '			TYPE RVV10 ' newline ...
                    '			PARAMETERS 20.0 0.0093 ' newline ...
                    '			KERNEL_FILE_NAME rVV10_kernel_table.dat ' newline ...
                    '           CUTOFF ' num2str(vdw_cutoff) newline ...
                    '		&END NON_LOCAL ' newline ...
                    '	  &END vdW_POTENTIAL ' newline ...
                    '    &END XC'];
    case {'lv-pw86r' 'cx'}
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &LIBXC' newline ...
                    '          FUNCTIONAL XC_GGA_X_LV_RPW86' newline ...
                    '        &END LIBXC' newline ...
                    '        &PW92' newline ...
                    '        &END PW92' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '    &END XC'];
    case {'lv-pw86r-vdw' 'vdw-df-cx'}
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &LIBXC' newline ...
                    '          FUNCTIONAL XC_GGA_X_LV_RPW86' newline ...
                    '        &END LIBXC' newline ...
                    '        &PW92' newline ...
                    '        &END PW92' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '      &vdW_POTENTIAL' newline ...
                    '         DISPERSION_FUNCTIONAL NON_LOCAL' newline ...
                    '         &NON_LOCAL' newline ...
                    '           TYPE DRSLL' newline ...
                    '           VERBOSE_OUTPUT' newline ...
                    '           KERNEL_FILE_NAME vdW_kernel_table.dat' newline ...
                    '           CUTOFF ' num2str(vdw_cutoff) newline ...
                    '         &END NON_LOCAL' newline ...
                    '      &END vdW_POTENTIAL' newline ...
                    '    &END XC'];
    case {'cx0p'} % hybrid version of cx
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &LIBXC' newline ...
                    '          FUNCTIONAL XC_GGA_X_LV_RPW86' newline ...
                    '          SCALE 0.80' newline ...
                    '        &END LIBXC' newline ...
                    '        &PW92' newline ...
                    '        &END PW92' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '      &HF' newline ...
                    '        &SCREENING' newline ...
                    '          EPS_SCHWARZ ' num2str(hfx.eps_schwarz) newline ...
                    '          SCREEN_ON_INITIAL_P FALSE' newline ...
                    '        &END' newline ...
                    '        &MEMORY' newline ...
                    '          EPS_STORAGE_SCALING 1.0' newline ...
                    '          MAX_MEMORY ' num2str(hfx.max_memory) newline ...
                    '        &END' newline ...
                    '        &INTERACTION_POTENTIAL' newline ...
                    '          POTENTIAL_TYPE TRUNCATED' newline ...
                    '          CUTOFF_RADIUS ' num2str(hfx.cutoff_radius) newline ...
                    '          T_C_G_DATA t_c_g.dat' newline ...
                    '        &END' newline ...
                    '        FRACTION 0.20' newline ...
                    '      &END' newline ...
                    '    &END XC'];
        HFX = true;
    case {'vdw-df-cx0p'} % hybrid
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &LIBXC' newline ...
                    '          FUNCTIONAL XC_GGA_X_LV_RPW86' newline ...
                    '          SCALE 0.80' newline ...
                    '        &END LIBXC' newline ...
                    '        &PW92' newline ...
                    '        &END PW92' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '      &HF' newline ...
                    '        &SCREENING' newline ...
                    '          EPS_SCHWARZ ' num2str(hfx.eps_schwarz) newline ...
                    '          SCREEN_ON_INITIAL_P FALSE' newline ...
                    '        &END' newline ...
                    '        &MEMORY' newline ...
                    '          EPS_STORAGE_SCALING 1.0' newline ...
                    '          MAX_MEMORY ' num2str(hfx.max_memory) newline ...
                    '        &END' newline ...
                    '        &INTERACTION_POTENTIAL' newline ...
                    '          POTENTIAL_TYPE TRUNCATED' newline ...
                    '          CUTOFF_RADIUS ' num2str(hfx.cutoff_radius) newline ...
                    '          T_C_G_DATA t_c_g.dat' newline ...
                    '        &END' newline ...
                    '        FRACTION 0.20' newline ...
                    '      &END' newline ...
                    '      &vdW_POTENTIAL' newline ...
                    '         DISPERSION_FUNCTIONAL NON_LOCAL' newline ...
                    '         &NON_LOCAL' newline ...
                    '           TYPE DRSLL' newline ...
                    '           VERBOSE_OUTPUT' newline ...
                    '           KERNEL_FILE_NAME vdW_kernel_table.dat' newline ...
                    '           CUTOFF ' num2str(vdw_cutoff) newline ...
                    '         &END NON_LOCAL' newline ...
                    '      &END vdW_POTENTIAL' newline ...
                    '    &END XC'];
        HFX = true;
    case {'hf'} % pure hartree-fock (hybrid)
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL NONE' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '      &HF' newline ...
                    '        &SCREENING' newline ...
                    '          EPS_SCHWARZ ' num2str(hfx.eps_schwarz) newline ...
                    '          SCREEN_ON_INITIAL_P FALSE' newline ...
                    '        &END' newline ...
                    '        &MEMORY' newline ...
                    '          EPS_STORAGE_SCALING 1.0' newline ...
                    '          MAX_MEMORY ' num2str(hfx.max_memory) newline ...
                    '        &END' newline ...
                    '        &INTERACTION_POTENTIAL' newline ...
                    '          POTENTIAL_TYPE TRUNCATED' newline ...
                    '          CUTOFF_RADIUS ' num2str(hfx.cutoff_radius) newline ...
                    '          T_C_G_DATA t_c_g.dat' newline ...
                    '        &END' newline ...
                    '        FRACTION 1.0' newline ...
                    '      &END' newline ...
                    '    &END XC'];
        HFX = true;
    case {'none'} % pure DFT without an exchange-correlation functional
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL NONE' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '    &END XC'];
        HFX = false;
    case 'optb88' 
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &LIBXC' newline ...
                    '          FUNCTIONAL XC_GGA_X_OPTB88_VDW' newline ...
                    '        &END LIBXC' newline ...
                    '        &PW92' newline ...
                    '        &END PW92' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '    &END XC'];
    case 'optb88-vdw' 
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &LIBXC' newline ...
                    '          FUNCTIONAL XC_GGA_X_OPTB88_VDW' newline ...
                    '        &END LIBXC' newline ...
                    '        &PW92' newline ...
                    '        &END PW92' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '      &vdW_POTENTIAL' newline ...
                    '         DISPERSION_FUNCTIONAL NON_LOCAL' newline ...
                    '         &NON_LOCAL' newline ...
                    '           TYPE DRSLL' newline ...
                    '           VERBOSE_OUTPUT' newline ...
                    '           KERNEL_FILE_NAME vdW_kernel_table.dat' newline ...
                    '           CUTOFF ' num2str(vdw_cutoff) newline ...
                    '         &END NON_LOCAL' newline ...
                    '      &END vdW_POTENTIAL' newline ...
                    '    &END XC'];
    case 'optpbe'
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &LIBXC' newline ...
                    '          FUNCTIONAL XC_GGA_X_OPTPBE_VDW' newline ...
                    '        &END LIBXC' newline ...
                    '        &PW92' newline ...
                    '        &END PW92' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '    &END XC'];
    case 'optpbe-vdw'
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &LIBXC' newline ...
                    '          FUNCTIONAL XC_GGA_X_OPTPBE_VDW' newline ...
                    '        &END LIBXC' newline ...
                    '        &PW92' newline ...
                    '        &END PW92' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '      &vdW_POTENTIAL' newline ...
                    '         DISPERSION_FUNCTIONAL NON_LOCAL' newline ...
                    '         &NON_LOCAL' newline ...
                    '           TYPE DRSLL' newline ...
                    '           VERBOSE_OUTPUT' newline ...
                    '           KERNEL_FILE_NAME vdW_kernel_table.dat' newline ...
                    '           CUTOFF ' num2str(vdw_cutoff) newline ...
                    '         &END NON_LOCAL' newline ...
                    '      &END vdW_POTENTIAL' newline ...
                    '    &END XC'];
    case 'optb86b'
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &LIBXC' newline ...
                    '          FUNCTIONAL XC_GGA_X_OPTB86B_VDW' newline ...
                    '        &END LIBXC' newline ...
                    '        &PW92' newline ...
                    '        &END PW92' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '    &END XC'];
    case 'optb86b-vdw'
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &LIBXC' newline ...
                    '          FUNCTIONAL XC_GGA_X_OPTB86B_VDW' newline ...
                    '        &END LIBXC' newline ...
                    '        &PW92' newline ...
                    '        &END PW92' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '      &vdW_POTENTIAL' newline ...
                    '         DISPERSION_FUNCTIONAL NON_LOCAL' newline ...
                    '         &NON_LOCAL' newline ...
                    '           TYPE DRSLL' newline ...
                    '           VERBOSE_OUTPUT' newline ...
                    '           KERNEL_FILE_NAME vdW_kernel_table.dat' newline ...
                    '           CUTOFF ' num2str(vdw_cutoff) newline ...
                    '         &END NON_LOCAL' newline ...
                    '      &END vdW_POTENTIAL' newline ...
                    '    &END XC'];
    case 'pbek=1'
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &LIBXC' newline ...
                    '          FUNCTIONAL XC_GGA_X_PBEK1_VDW' newline ...
                    '        &END LIBXC' newline ...
                    '        &PW92' newline ...
                    '        &END PW92' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '    &END XC'];
    case 'pbek=1-vdw'
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &LIBXC' newline ...
                    '          FUNCTIONAL XC_GGA_X_PBEK1_VDW' newline ...
                    '        &END LIBXC' newline ...
                    '        &PW92' newline ...
                    '        &END PW92' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '      &vdW_POTENTIAL' newline ...
                    '         DISPERSION_FUNCTIONAL NON_LOCAL' newline ...
                    '         &NON_LOCAL' newline ...
                    '           TYPE DRSLL' newline ...
                    '           VERBOSE_OUTPUT' newline ...
                    '           KERNEL_FILE_NAME vdW_kernel_table.dat' newline ...
                    '           CUTOFF ' num2str(vdw_cutoff) newline ...
                    '         &END NON_LOCAL' newline ...
                    '      &END vdW_POTENTIAL' newline ...
                    '    &END XC'];
    case 'c09'
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &LIBXC' newline ...
                    '          FUNCTIONAL XC_GGA_X_C09X' newline ...
                    '        &END LIBXC' newline ...
                    '        &PW92' newline ...
                    '        &END PW92' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '    &END XC'];
    case 'c09-vdw'
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &LIBXC' newline ...
                    '          FUNCTIONAL XC_GGA_X_C09X' newline ...
                    '        &END LIBXC' newline ...
                    '        &PW92' newline ...
                    '        &END PW92' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '      &vdW_POTENTIAL' newline ...
                    '         DISPERSION_FUNCTIONAL NON_LOCAL' newline ...
                    '         &NON_LOCAL' newline ...
                    '           TYPE DRSLL' newline ...
                    '           VERBOSE_OUTPUT' newline ...
                    '           KERNEL_FILE_NAME vdW_kernel_table.dat' newline ...
                    '           CUTOFF ' num2str(vdw_cutoff) newline ...
                    '         &END NON_LOCAL' newline ...
                    '      &END vdW_POTENTIAL' newline ...
                    '    &END XC'];
    case 'revpbe' % revPBE exchange and correlation
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &PBE' newline ...
                    '         PARAMETRIZATION revPBE' newline ...
                    '        &END PBE' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '    &END XC'];
    case 'revpbex' % revPBE exchange, with LDA correlation
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &PBE' newline ...
                    '         PARAMETRIZATION revPBE' newline ...
                    '         SCALE_C 0.0' newline ...
                    '        &END PBE' newline ...
                    '        &PW92' newline ...
                    '        &END PW92' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '    &END XC'];
    case {'vdw-df' 'revpbex-vdw'}
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &PBE' newline ...
                    '         PARAMETRIZATION revPBE' newline ...
                    '         SCALE_C 0.0' newline ...
                    '        &END PBE' newline ...
                    '        &PW92' newline ...
                    '        &END PW92' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '      &vdW_POTENTIAL' newline ...
                    '         DISPERSION_FUNCTIONAL NON_LOCAL' newline ...
                    '         &NON_LOCAL' newline ...
                    '           TYPE DRSLL' newline ...
                    '           VERBOSE_OUTPUT' newline ...
                    '           KERNEL_FILE_NAME vdW_kernel_table.dat' newline ...
                    '           CUTOFF ' num2str(vdw_cutoff) newline ...
                    '         &END NON_LOCAL' newline ...
                    '      &END vdW_POTENTIAL' newline ...
                    '    &END XC'];
    case 'b86r'
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &LIBXC' newline ...
                    '          FUNCTIONAL XC_GGA_X_B86_R' newline ...
                    '        &END LIBXC' newline ...
                    '        &PW92' newline ...
                    '        &END PW92' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '    &END XC'];
    case {'b86r-vdw-df2' 'rev-vdw-df2'}
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &LIBXC' newline ...
                    '          FUNCTIONAL XC_GGA_X_B86_R' newline ...
                    '        &END LIBXC' newline ...
                    '        &PW92' newline ...
                    '        &END PW92' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '      &vdW_POTENTIAL' newline ...
                    '         DISPERSION_FUNCTIONAL NON_LOCAL' newline ...
                    '         &NON_LOCAL' newline ...
                    '           TYPE LMKLL' newline ...
                    '           VERBOSE_OUTPUT' newline ...
                    '           KERNEL_FILE_NAME vdW_kernel_table.dat' newline ...
                    '           CUTOFF ' num2str(vdw_cutoff) newline ...
                    '         &END NON_LOCAL' newline ...
                    '      &END vdW_POTENTIAL' newline ...
                    '    &END XC'];
    case 'pw86r' % uses PBE correlation
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &LIBXC' newline ...
                    '          FUNCTIONAL XC_GGA_X_RPW86' newline ...
                    '        &END LIBXC' newline ...
                    '		&PBE' newline ...
                    '		  SCALE_X 0.000' newline ...
                    '		&END PBE' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '    &END XC'];
    case {'vdw-df2' 'pw86r-vdw-df2'}
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &LIBXC' newline ...
                    '          FUNCTIONAL XC_GGA_X_RPW86' newline ...
                    '        &END LIBXC' newline ...
                    '        &PW92' newline ...
                    '        &END PW92' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '      &vdW_POTENTIAL' newline ...
                    '         DISPERSION_FUNCTIONAL NON_LOCAL' newline ...
                    '         &NON_LOCAL' newline ...
                    '           TYPE LMKLL' newline ...
                    '           VERBOSE_OUTPUT' newline ...
                    '           KERNEL_FILE_NAME vdW_kernel_table.dat' newline ...
                    '           CUTOFF ' num2str(vdw_cutoff) newline ...
                    '         &END NON_LOCAL' newline ...
                    '      &END vdW_POTENTIAL' newline ...
                    '    &END XC'];
    case 'beef'
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL BEEFVDW' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '	 &END XC'];
    case 'beef-vdw'
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL BEEFVDW' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '      &VDW_POTENTIAL' newline ...
                    '        &NON_LOCAL' newline ...
                    '           TYPE LMKLL' newline ...
                    '           VERBOSE_OUTPUT' newline ...
                    '           KERNEL_FILE_NAME vdW_kernel_table.dat' newline ...
                    '           CUTOFF ' num2str(vdw_cutoff) newline ...
                    '        &END NON_LOCAL' newline ...
                    '      &END VDW_POTENTIAL' newline ...
                    '    &END XC'];
    case 'mbeef'
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &LIBXC' newline ...
                    '          FUNCTIONAL MGGA_X_MBEEF' newline ...
                    '        &END LIBXC' newline ...
                    '       &PBE' newline ...
                    '         PARAMETRIZATION PBESOL' newline ...
                    '         SCALE_X 0.0000' newline ...
                    '       &END PBE' newline ...
                    '    &END XC'];
        mGGA = true;
    case 'wb97' % long-range only hybrid
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &LIBXC' newline ...
                    '          FUNCTIONAL HYB_GGA_XC_WB97' newline ...
                    '        &END LIBXC' newline ...
                    '        &PW92' newline ...
                    '        &END PW92' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '      &HF' newline ...
                    '        &SCREENING' newline ...
                    '          EPS_SCHWARZ ' num2str(hfx.eps_schwarz) newline ...
                    '          SCREEN_ON_INITIAL_P FALSE' newline ...
                    '        &END' newline ...
                    '        &MEMORY' newline ...
                    '          EPS_STORAGE_SCALING 1.0' newline ...
                    '          MAX_MEMORY ' num2str(hfx.max_memory) newline ...
                    '        &END' newline ...
                    '        &INTERACTION_POTENTIAL' newline ...
                    '          POTENTIAL_TYPE MIX_CL_TRUNC' newline ...
                    '          SCALE_COULOMB   0.000' newline ...
                    '          SCALE_LONGRANGE 1.000' newline ...
                    '          OMEGA 0.40' newline ...
                    '          CUTOFF_RADIUS ' num2str(hfx.cutoff_radius) newline ...
                    '          T_C_G_DATA t_c_g.dat' newline ...
                    '        &END' newline ...
                    '        FRACTION 1.000' newline ...
                    '      &END' newline ...
                    '    &END XC'];
        HFX = true;
    case 'wb97x' % hybrid
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &LIBXC' newline ...
                    '          FUNCTIONAL HYB_GGA_XC_WB97X' newline ...
                    '        &END LIBXC' newline ...
                    '        &PW92' newline ...
                    '        &END PW92' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '      &HF' newline ...
                    '        &SCREENING' newline ...
                    '          EPS_SCHWARZ ' num2str(hfx.eps_schwarz) newline ...
                    '          SCREEN_ON_INITIAL_P FALSE' newline ...
                    '        &END' newline ...
                    '        &MEMORY' newline ...
                    '          EPS_STORAGE_SCALING 1.0' newline ...
                    '          MAX_MEMORY ' num2str(hfx.max_memory) newline ...
                    '        &END' newline ...
                    '        &INTERACTION_POTENTIAL' newline ...
                    '          POTENTIAL_TYPE MIX_CL_TRUNC' newline ...
                    '          SCALE_COULOMB   0.157706' newline ...
                    '          SCALE_LONGRANGE 0.842294' newline ...
                    '          OMEGA 0.30' newline ...
                    '          CUTOFF_RADIUS ' num2str(hfx.cutoff_radius) newline ...
                    '          T_C_G_DATA t_c_g.dat' newline ...
                    '        &END' newline ...
                    '        FRACTION 1.000' newline ...
                    '      &END' newline ...
                    '    &END XC'];
        HFX = true;
    case 'wb97x-rv' % hybrid
        XC_Func =  ['    &XC' newline ...
                    '      &XC_FUNCTIONAL' newline ...
                    '        &LIBXC' newline ...
                    '          FUNCTIONAL HYB_GGA_XC_WB97X_V' newline ...
                    '        &END LIBXC' newline ...
                    '        &PW92' newline ...
                    '        &END PW92' newline ...
                    '      &END XC_FUNCTIONAL' newline ...
                    '      &HF' newline ...
                    '        &SCREENING' newline ...
                    '          EPS_SCHWARZ ' num2str(hfx.eps_schwarz) newline ...
                    '          SCREEN_ON_INITIAL_P FALSE' newline ...
                    '        &END' newline ...
                    '        &MEMORY' newline ...
                    '          EPS_STORAGE_SCALING 1.0' newline ...
                    '          MAX_MEMORY ' num2str(hfx.max_memory) newline ...
                    '        &END' newline ...
                    '        &INTERACTION_POTENTIAL' newline ...
                    '          POTENTIAL_TYPE MIX_CL_TRUNC' newline ...
                    '          SCALE_COULOMB   0.167' newline ...
                    '          SCALE_LONGRANGE 0.833' newline ...
                    '          OMEGA 0.30' newline ...
                    '          CUTOFF_RADIUS ' num2str(hfx.cutoff_radius) newline ...
                    '          T_C_G_DATA t_c_g.dat' newline ...
                    '        &END' newline ...
                    '        FRACTION 1.000' newline ...
                    '      &END' newline ...
                    '      &vdW_POTENTIAL' newline ...
                    '         DISPERSION_FUNCTIONAL NON_LOCAL' newline ...
                    '         &NON_LOCAL' newline ...
                    '           TYPE RVV10' newline ...
                    '           PARAMETERS 6.2 0.0093' newline ...
                    '           VERBOSE_OUTPUT' newline ...
                    '           KERNEL_FILE_NAME rVV10_kernel_table.dat' newline ...
                    '           CUTOFF ' num2str(vdw_cutoff) newline ...
                    '           SCALE 1.0' newline ...
                    '         &END NON_LOCAL' newline ...
                    '      &END vdW_POTENTIAL' newline ...
                    '    &END XC'];
        HFX = true;
    case 'scan'
        XC_Func =  ['	&XC ' newline ...
                    '	  &XC_FUNCTIONAL ' newline ...
                    '		&LIBXC ' newline ...
                    '		  FUNCTIONAL XC_MGGA_X_SCAN ' newline ...
                    '		&END LIBXC ' newline ...
                    '		&LIBXC ' newline ...
                    '		  FUNCTIONAL XC_MGGA_C_SCAN ' newline ...
                    '		&END LIBXC ' newline ...
                    '	  &END XC_FUNCTIONAL ' newline ...
                    '	&END XC'];
        mGGA = true;
    case 'scan-rvv10'
        XC_Func =  ['	&XC ' newline ...
                    '	  &XC_FUNCTIONAL ' newline ...
                    '		&LIBXC ' newline ...
                    '		  FUNCTIONAL XC_MGGA_X_SCAN ' newline ...
                    '		&END LIBXC ' newline ...
                    '		&LIBXC ' newline ...
                    '		  FUNCTIONAL XC_MGGA_C_SCAN ' newline ...
                    '		&END LIBXC ' newline ...
                    '	  &END XC_FUNCTIONAL ' newline ...
                    '	  &vdW_POTENTIAL ' newline ...
                    '		DISPERSION_FUNCTIONAL NON_LOCAL ' newline ...
                    '		&NON_LOCAL ' newline ...
                    '			TYPE RVV10 ' newline ...
                    '			PARAMETERS 15.7 0.0093 ' newline ...
                    '			KERNEL_FILE_NAME rVV10_kernel_table.dat ' newline ...
                    '           CUTOFF ' num2str(vdw_cutoff) newline ...
                    '		&END NON_LOCAL ' newline ...
                    '	  &END vdW_POTENTIAL ' newline ...
                    '	&END XC'];
        mGGA = true;
    case {'rvv10' 'pw86r-rvv10'}
        XC_Func =  ['	&XC ' newline ...
                    '	  &XC_FUNCTIONAL ' newline ...
                    '		&LIBXC ' newline ...
                    '		  FUNCTIONAL GGA_X_RPW86 ' newline ...
                    '		&END LIBXC ' newline ...
                    '		&PBE' newline ...
                    '		  SCALE_X 0.000' newline ...
                    '		&END PBE' newline ...
                    '	  &END XC_FUNCTIONAL ' newline ...
                    '	  &vdW_POTENTIAL ' newline ...
                    '		DISPERSION_FUNCTIONAL NON_LOCAL ' newline ...
                    '		&NON_LOCAL ' newline ...
                    '			TYPE RVV10 ' newline ...
                    '			PARAMETERS 6.3 0.0093 ' newline ...
                    '			KERNEL_FILE_NAME rVV10_kernel_table.dat ' newline ...
                    '           CUTOFF ' num2str(vdw_cutoff) newline ...
                    '		&END NON_LOCAL ' newline ...
                    '	  &END vdW_POTENTIAL ' newline ...
                    '	&END XC'];
    case 'am05'
        XC_Func =  ['	&XC ' newline ...
                    '	  &XC_FUNCTIONAL ' newline ...
                    '		&LIBXC ' newline ...
                    '		  FUNCTIONAL GGA_X_AM05 ' newline ...
                    '		&END LIBXC ' newline ...
                    '		&LIBXC ' newline ...
                    '		  FUNCTIONAL GGA_C_AM05 ' newline ...
                    '		&END LIBXC ' newline ...
                    '	  &END XC_FUNCTIONAL ' newline ...
                    '	&END XC'];        
    case 'am05-vv10sol'
        XC_Func =  ['	&XC ' newline ...
                    '	  &XC_FUNCTIONAL ' newline ...
                    '		&LIBXC ' newline ...
                    '		  FUNCTIONAL GGA_X_AM05 ' newline ...
                    '		&END LIBXC ' newline ...
                    '		&LIBXC ' newline ...
                    '		  FUNCTIONAL GGA_C_AM05 ' newline ...
                    '		&END LIBXC ' newline ...
                    '	  &END XC_FUNCTIONAL ' newline ...
                    '	  &vdW_POTENTIAL ' newline ...
                    '		DISPERSION_FUNCTIONAL NON_LOCAL ' newline ...
                    '		&NON_LOCAL ' newline ...
                    '			TYPE RVV10 ' newline ...
                    '			PARAMETERS 10.25 0.000001 ' newline ...
                    '			KERNEL_FILE_NAME rVV10_kernel_table.dat ' newline ...
                    '           CUTOFF ' num2str(vdw_cutoff) newline ...
                    '		&END NON_LOCAL ' newline ...
                    '	  &END vdW_POTENTIAL ' newline ...
                    '	&END XC'];
    case 'sg4'
        XC_Func =  ['	&XC ' newline ...
                    '	  &XC_FUNCTIONAL ' newline ...
                    '		&LIBXC ' newline ...
                    '		  FUNCTIONAL GGA_X_SG4' newline ...
                    '		&END LIBXC ' newline ...
                    '		&LIBXC ' newline ...
                    '		  FUNCTIONAL GGA_C_SG4' newline ...
                    '		&END LIBXC ' newline ...
                    '	  &END XC_FUNCTIONAL ' newline ...
                    '	&END XC'];
    case 'sg4-rvv10m'
        XC_Func =  ['	&XC ' newline ...
                    '	  &XC_FUNCTIONAL ' newline ...
                    '		&LIBXC ' newline ...
                    '		  FUNCTIONAL GGA_X_SG4' newline ...
                    '		&END LIBXC ' newline ...
                    '		&LIBXC ' newline ...
                    '		  FUNCTIONAL GGA_C_SG4' newline ...
                    '		&END LIBXC ' newline ...
                    '	  &END XC_FUNCTIONAL ' newline ...
                    '	  &vdW_POTENTIAL ' newline ...
                    '		DISPERSION_FUNCTIONAL NON_LOCAL ' newline ...
                    '		&NON_LOCAL ' newline ...
                    '			TYPE RVV10 ' newline ...
                    '			PARAMETERS 12 0.0001 ' newline ...
                    '			KERNEL_FILE_NAME rVV10_kernel_table.dat ' newline ...
                    '           CUTOFF ' num2str(vdw_cutoff) newline ...
                    '		&END NON_LOCAL ' newline ...
                    '	  &END vdW_POTENTIAL ' newline ...
                    '	&END XC'];
    case 'tmtpss'
        XC_Func =  ['	&XC ' newline ...
                    '	  &XC_FUNCTIONAL ' newline ...
                    '		&LIBXC ' newline ...
                    '		  FUNCTIONAL MGGA_X_TM' newline ...
                    '		&END LIBXC ' newline ...
                    '		&LIBXC ' newline ...
                    '		  FUNCTIONAL MGGA_C_TPSS' newline ...
                    '		&END LIBXC ' newline ...
                    '	  &END XC_FUNCTIONAL ' newline ...
                    '	&END XC'];
        mGGA = true;
    case 'tmtpss-rvv10l'
        XC_Func =  ['	&XC ' newline ...
                    '	  &XC_FUNCTIONAL ' newline ...
                    '		&LIBXC ' newline ...
                    '		  FUNCTIONAL MGGA_X_TM' newline ...
                    '		&END LIBXC ' newline ...
                    '		&LIBXC ' newline ...
                    '		  FUNCTIONAL MGGA_C_TPSS' newline ...
                    '		&END LIBXC ' newline ...
                    '	  &END XC_FUNCTIONAL ' newline ...
                    '	  &vdW_POTENTIAL ' newline ...
                    '		DISPERSION_FUNCTIONAL NON_LOCAL ' newline ...
                    '		&NON_LOCAL ' newline ...
                    '			TYPE RVV10 ' newline ...
                    '			PARAMETERS 22.7 0.0001 ' newline ...
                    '			KERNEL_FILE_NAME rVV10_kernel_table.dat ' newline ...
                    '           CUTOFF ' num2str(vdw_cutoff) newline ...
                    '		&END NON_LOCAL ' newline ...
                    '	  &END vdW_POTENTIAL ' newline ...
                    '	&END XC'];
        mGGA = true;
    otherwise
        error(['Unknown XC functional name: ' XC_Func_Name])
end

if smoothing && finer_grid && ~mGGA
    smooth = ['&XC' newline ...
            '      &XC_GRID' newline ...
            '        USE_FINER_GRID ' newline ...
            '        XC_SMOOTH_RHO NONE' newline ...
            '        XC_DERIV SPLINE3 ' newline ...
            '      &END XC_GRID' newline];
    XC_Func = regexprep(XC_Func,'&XC *\n',smooth);
elseif smoothing
    smooth = ['&XC' newline ...
            '      &XC_GRID' newline ...
            '        XC_SMOOTH_RHO NONE' newline ...
            '        XC_DERIV SPLINE3 ' newline ...
            '      &END XC_GRID' newline];
    XC_Func = regexprep(XC_Func,'&XC *\n',smooth);
elseif finer_grid && ~mGGA
    smooth = ['&XC' newline ...
            '      &XC_GRID' newline ...
            '        USE_FINER_GRID ' newline ...
            '      &END XC_GRID' newline];
    XC_Func = regexprep(XC_Func,'&XC *\n',smooth);
end



end