function [Coords,ABC,Angles,Symmetry,Constraint] = cp2k_Structures(Structure,Salt,Ref_Theory,varargin)

% Possible Structures
% Rocksalt
% Wurtzite
% CsCl
% FiveFive
% BetaBeO
% Sphalerite
% NiAs

if nargin > 3
    is_cp2k_data = varargin{1};
else
    is_cp2k_data = false;
end

[Metal,Halide] = Separate_Metal_Halide(Salt);

switch lower(Structure)
    case 'rocksalt'
        Coords =   ['		' Metal '         0         0         0' newline ...
                    '		' Halide '   0.5000    0.5000    0.5000'];
        Angles = [60 60 60];
        Symmetry = 'RHOMBOHEDRAL';
        abc = [1 1 1];
        Constraint =   ['  &CONSTRAINT' newline ...
                        '    &FIXED_ATOMS' newline ...
                        '      COMPONENTS_TO_FIX XYZ' newline ...
                        '      LIST 1 2' newline ...
                        '    &END FIXED_ATOMS' newline ...
                        '  &END CONSTRAINT'];
    case 'wurtzite'
        Coords =   ['		' Metal '     0.666666666667 0.666666666667 0.375000000000' newline ...
                    '		' Metal '     0.333333333333 0.333333333333 0.875000000000' newline ...
                    '		' Halide '    0.666666666667 0.666666666667 0.000000000000' newline ...
                    '		' Halide '    0.333333333333 0.333333333333 0.500000000000'];
        Angles = [90 90 60];
        Symmetry = 'HEXAGONAL';
        abc = [1 1 sqrt(8/3)];
        Constraint =   ['  &CONSTRAINT' newline ...
                        '    &FIXED_ATOMS' newline ...
                        '      COMPONENTS_TO_FIX XYZ' newline ...
                        '      LIST 1 2 3 4' newline ...
                        '    &END FIXED_ATOMS' newline ...
                        '  &END CONSTRAINT'];
    case 'fivefive'
        Coords =   ['		' Metal '     0.666666666667 0.666666666667 0.500000000000' newline ...
                    '		' Metal '     0.333333333333 0.333333333333 0.000000000000' newline ...
                    '		' Halide '    0.666666666667 0.666666666667 0.000000000000' newline ...
                    '		' Halide '    0.333333333333 0.333333333333 0.500000000000'];
        Angles = [90 90 60];
        Symmetry = 'HEXAGONAL';
        abc = [1 1 (2*sqrt((1/4) + (1/9)*(sind(60)^2)))];
        Constraint =   ['  &CONSTRAINT' newline ...
                        '    &FIXED_ATOMS' newline ...
                        '      COMPONENTS_TO_FIX XYZ' newline ...
                        '      LIST 1 2 3 4' newline ...
                        '    &END FIXED_ATOMS' newline ...
                        '  &END CONSTRAINT'];
    case 'cscl'
        Coords =   ['		' Metal '         0         0         0' newline ...
                    '		' Halide '   0.5000    0.5000    0.5000'];
        Angles = [90 90 90];
        Symmetry = 'CUBIC';
        abc = [1 1 1];
        Constraint =   ['  &CONSTRAINT' newline ...
                        '    &FIXED_ATOMS' newline ...
                        '      COMPONENTS_TO_FIX XYZ' newline ...
                        '      LIST 1 2' newline ...
                        '    &END FIXED_ATOMS' newline ...
                        '  &END CONSTRAINT'];
    case 'betabeo'
        Coords =   ['		' Metal '    0.3360    0.6640    0.0000' newline ...
                    '		' Metal '    0.6640    0.3360    0.0000' newline ...
                    '		' Metal '    0.8360    0.8360    0.5000' newline ...
                    '		' Metal '    0.1640    0.1640    0.5000' newline ...
                    '		' Halide '   0.3100    0.3100    0.0000' newline ...
                    '		' Halide '   0.6900    0.6900    0.0000' newline ...
                    '		' Halide '   0.8100    0.1900    0.5000' newline ...
                    '		' Halide '   0.1900    0.8100    0.5000'];
        Angles = [90 90 90];
        Symmetry = 'TETRAGONAL';
        abc = [1 1 1/sqrt(3)];
        Constraint =   ['  &CONSTRAINT' newline ...
                        '    &FIXED_ATOMS' newline ...
                        '      COMPONENTS_TO_FIX XYZ' newline ...
                        '      LIST 1 2 3 4 5 6 7 8' newline ...
                        '    &END FIXED_ATOMS' newline ...
                        '  &END CONSTRAINT'];
    case 'sphalerite'
        Coords =   ['		' Metal '    0.0000    0.0000    0.0000' newline ...
                    '		' Halide '   0.2500    0.2500    0.2500'];
        Angles = [60 60 60];
        Symmetry = 'RHOMBOHEDRAL';
        abc = [1 1 1];
        Constraint =   ['  &CONSTRAINT' newline ...
                        '    &FIXED_ATOMS' newline ...
                        '      COMPONENTS_TO_FIX XYZ' newline ...
                        '      LIST 1 2' newline ...
                        '    &END FIXED_ATOMS' newline ...
                        '  &END CONSTRAINT'];
    case 'nias'
        Coords =   ['		' Metal '    0.0000            0.0000            0.0000' newline ...
                    '		' Metal '    0.0000            0.0000            0.5000' newline ...
                    '		' Halide '   0.333333333333    0.333333333333    0.2500' newline ...
                    '		' Halide '   0.666666666667    0.666666666667    0.7500'];
        Angles = [90 90 60];
        Symmetry = 'HEXAGONAL';
        abc = [1 1 sqrt(8/3)];
        Constraint =   ['  &CONSTRAINT' newline ...
                        '    &FIXED_ATOMS' newline ...
                        '      COMPONENTS_TO_FIX XYZ' newline ...
                        '      LIST 1 2 3 4' newline ...
                        '    &END FIXED_ATOMS' newline ...
                        '  &END CONSTRAINT'];
    case 'antinias'
        Coords =   ['		' Metal '   0.333333333333    0.333333333333    0.2500' newline ...
                    '		' Metal '   0.666666666667    0.666666666667    0.7500' newline ...
                    '		' Halide '    0.0000            0.0000            0.0000' newline ...
                    '		' Halide '    0.0000            0.0000            0.5000'];
        Angles = [90 90 60];
        Symmetry = 'HEXAGONAL';
        abc = [1 1 sqrt(8/3)];
        Constraint =   ['  &CONSTRAINT' newline ...
                        '    &FIXED_ATOMS' newline ...
                        '      COMPONENTS_TO_FIX XYZ' newline ...
                        '      LIST 1 2 3 4' newline ...
                        '    &END FIXED_ATOMS' newline ...
                        '  &END CONSTRAINT'];
end

% Get approximate structure parameters from previous calculation.
if ~is_cp2k_data
    Ref_Params = Find_Ref_Params(Salt,Structure,Ref_Theory,'pob-TZVP',1);
    ABC = num2str(abc*Ref_Params.SF,'%1.12f   ');
else
    home = find_home;
    Data_Directory = [home filesep 'data'] ;
    CP2K_Data_Obj = load(fullfile(Data_Directory,'CP2K_Data.mat'));
    
    switch Salt
        case {'LiF' 'LiCl' 'NaCl'}
            Theory = strrep(Ref_Theory,'-','_');
        otherwise
            Theory = [strrep(Ref_Theory,'-','_') '_DKH'];
    end
    
    a = CP2K_Data_Obj.Data.Sapporo_QZP.(Theory).(Salt).(Structure).a;
    b = CP2K_Data_Obj.Data.Sapporo_QZP.(Theory).(Salt).(Structure).b;
    c = CP2K_Data_Obj.Data.Sapporo_QZP.(Theory).(Salt).(Structure).c;
    
    switch lower(Structure)
        case 'rocksalt'
            Structure_out.a = a/sqrt(2);
            Structure_out.b = b/sqrt(2);
            Structure_out.c = c/sqrt(2);
        case 'wurtzite'
            Structure_out.a = a;
            Structure_out.b = b;
            Structure_out.c = c;
        case 'fivefive'
            Structure_out.a = c;
            Structure_out.b = (sqrt(3)/3)*b;
            Structure_out.c = a;
        case 'cscl'
            Structure_out.a = a;
            Structure_out.b = b;
            Structure_out.c = c;
        case 'betabeo'
            Structure_out.a = a;
            Structure_out.b = b;
            Structure_out.c = c;
        case 'sphalerite'
            Structure_out.a = a/sqrt(2);
            Structure_out.b = b/sqrt(2);
            Structure_out.c = c/sqrt(2);
        case {'nias' 'antinias'}
            Structure_out.a = a;
            Structure_out.b = b;
            Structure_out.c = c;
        otherwise
            error(['Unknown structure: ' Structure])
    end
    abc = [Structure_out.a Structure_out.b Structure_out.c];
    ABC = num2str(abc,'%1.12f   ');
    
end
Angles = num2str(Angles,'%3i ');

end