% Script to generate submission scripts for multiple batch jobs

function local = GenD4Submission(WorkDir,JobName,Submit,NumLinks,Hours,Mins,nCores,MemPerNode)

local = false;
jobrun = ['matlab -r ''Run_D4_Minimization; exit'' > ' JobName '.optlog'];

if ispc
    Server = 'local'; % for testing
else
    [~,Servertxt] = system('hostname -s | cut -c 1-3');
    Server = strtrim(Servertxt);
end

if strcmpi(Server,'ced') || strcmpi(Server,'cdr') % cedar
    Account = 'rrg-patey-ad';
elseif ~isempty(regexp(Server,'se[0-9]','ONCE')) || strcmpi(Server,'log') % sockeye
    Account = 'st-gpatey-1';
else
    Account = 'def-patey';
end

if strcmpi(Server,'sea') % Orcinus
    Cores_per_node = 12;
    Nodes = ceil(nCores/Cores_per_node);
    scheduler=1; % PBS Scheduler
    
    if strcmp(MemPerNode,'-1')
        memline = '';
    elseif strcmp(MemPerNode,'0')
        memline = '';
    else
        memline = ['#PBS -l pmem=' MemPerNode newline];
    end
    
    BatchText = ['#!/bin/bash' newline ...
        '#PBS -S /ThesisCodeBase/bash' newline ...
        '#PBS -l walltime=' num2str(Hours) ':' num2str(Mins) ':00' newline ...
        '#PBS -l nodes=' num2str(Nodes) ':ppn=' num2str(Cores_per_node) newline ...
        memline ...
        '#PBS -V' newline ...
        '#PBS -N ' JobName newline ...
        '#PBS -e ' JobName '.stde' newline ...
        '#PBS -o ' JobName '.stdo' newline ...
        '#PBS -l partition=QDR' newline ...
        newline newline ...
        '# Check on some basics:' newline ...
        'echo "Running on host: " `hostname`' newline ...
        'echo "Changing to directory from which PBS script was submitted."' newline ...
        'cd ' WorkDir  newline ...
        'echo "Current working directory is now: " `pwd`' newline ...
        newline newline ...
        '# Run Job' newline ...
        jobrun newline ...
        'echo "Job completed at `date`"' newline ... 
        'exit 0'];

    qsub = 'qsub';
elseif strcmpi(Server,'bel') % Beluga
    Cores_per_node = 40;
    Nodes = ceil(nCores/Cores_per_node);
    scheduler=2; % SLURM Scheduler
    
    if strcmp(MemPerNode,'-1')
        memline = '';
    elseif strcmp(MemPerNode,'0')
        memline = ['#SBATCH --mem-per-cpu=MaxMemPerCPU' newline];
    else
        memline = ['#SBATCH --mem-per-cpu=' MemPerNode newline];
    end
    TasksPerNode = min(nCores,Cores_per_node);

    BatchText = ['#!/bin/bash' newline ... 
        '#SBATCH --time=' num2str(Hours) ':' num2str(Mins) ':00' newline ... 
        '#SBATCH --nodes=' num2str(Nodes) newline ... 
        '#SBATCH --tasks-per-node=' num2str(TasksPerNode) newline ... 
        '#SBATCH --cpus-per-task=1' newline ... 
        memline ...
        '#SBATCH --account=' Account newline ... 
        '#SBATCH --job-name=' JobName newline ... 
        '#SBATCH --error=' JobName '.stde' newline ... 
        '#SBATCH --export=ALL' newline ... 
        newline newline ... 
        '# Check on some basics:' newline ... 
        'echo "Running on host: " `hostname`' newline ... 
        'echo "Changing to directory from which PBS script was submitted."' newline ... 
        'cd ' WorkDir  newline ... 
        'echo "Current working directory is now: " `pwd`' newline ... 
        newline newline ...
        '# Run Job' newline ... 
        jobrun newline ...
        'echo "Job completed at `date`"' newline ... 
        'exit 0'];
    
    qsub = 'sbatch --export=all';
elseif ~isempty(regexp(Server,'se[0-9]','ONCE')) || strcmpi(Server,'log') % sockeye
    
    Cores_per_node = 32;
    Nodes = ceil(nCores/Cores_per_node);
    scheduler=1; % PBS Scheduler
    
    if strcmp(MemPerNode,'-1')
        memline = '16gb';
    elseif strcmp(MemPerNode,'0')
        memline = '16gb';
    else
        memline = MemPerNode;
    end
    
    BatchText = ['#!/bin/bash' newline ...
        '#PBS -l walltime=' num2str(Hours) ':' num2str(Mins) ':00,' ...
        'select=' num2str(Nodes) ':ncpus=' num2str(Cores_per_node) ':mpiprocs=' num2str(Cores_per_node/8) ...
        ':ompthreads=' num2str(Cores_per_node/4) ':mem=' memline newline ...
        '#PBS -A ' Account newline ...
        '#PBS -N ' JobName newline ...
        '#PBS -e ' JobName '.stde' newline ...
        '#PBS -o ' JobName '.stdo' newline ...
        newline newline ...
        '# Check on some basics:' newline ...
        'echo "Running on host: " `hostname`' newline ...
        'echo "Changing to directory from which PBS script was submitted."' newline ...
        'cd ' WorkDir  newline ...
        'echo "Current working directory is now: " `pwd`' newline ...
        newline newline ...
        '# Run Job' newline ...
        jobrun newline ...
        'echo "Job completed at `date`"' newline ... 
        'exit 0'];

    qsub = 'qsub';
    
elseif strcmpi(Server,'ced') || strcmpi(Server,'cdr') || strcmpi(Server,'gra') % Cedar and graham
    if strcmpi(Server,'ced') || strcmpi(Server,'cdr')
        Cores_per_node = 48;
    else
        Cores_per_node = 32; % Graham
    end
    
    Nodes = ceil(nCores/Cores_per_node);
    scheduler=2; % SLURM Scheduler
    TasksPerNode = min(nCores,Cores_per_node);
    
    if strcmp(MemPerNode,'-1')
        memline = '';
    elseif strcmp(MemPerNode,'0')
        memline = ['#SBATCH --mem-per-cpu=MaxMemPerCPU' newline];
    else
        memline = ['#SBATCH --mem-per-cpu=' MemPerNode newline];
    end
    
    BatchText = ['#!/bin/bash' newline ... 
        '#SBATCH --time=' num2str(Hours) ':' num2str(Mins) ':00' newline ... 
        '#SBATCH --nodes=' num2str(Nodes) newline ... 
        '#SBATCH --tasks-per-node=' num2str(TasksPerNode) newline ... 
        '#SBATCH --cpus-per-task=1' newline ... 
        memline ...
        '#SBATCH --account=' Account newline ... 
        '#SBATCH --job-name=' JobName newline ... 
        '#SBATCH --error=' JobName '.stde' newline ... 
        '#SBATCH --export=ALL' newline ... 
        newline newline ... 
        '# Check on some basics:' newline ... 
        'echo "Running on host: " `hostname`' newline ... 
        'echo "Changing to directory from which PBS script was submitted."' newline ... 
        'cd ' WorkDir  newline ... 
        'echo "Current working directory is now: " `pwd`' newline ... 
        newline newline ...
        '# Run Job' newline ... 
        jobrun newline ...
        'echo "Job completed at `date`"' newline ... 
        'exit 0'];
    
    qsub = 'sbatch --export=all';
else
    local = true;
    return
end


% Save batch text as batch file
if ~local
    if NumLinks > 1
        for i = 1:NumLinks
            JobNameUniq = [JobName '-' num2str(i,'%.3i')];
            BatchTextUniq = regexprep(BatchText,JobName,JobNameUniq);
            
            submfilename = [WorkDir filesep JobNameUniq '.subm'];
            fidPM = fopen(submfilename,'wt');
            fwrite(fidPM,regexprep(BatchTextUniq,{'\r', '\n\n+'}',{'', '\n'}));
            fclose(fidPM);

            % Submit batch job
            cd(WorkDir)
            if Submit
                if i == 1
                    [~,FullJobID] = system([qsub ' ' submfilename]);
                else
                    if scheduler == 1 % PBS
                        [~,FullJobID] = system([qsub ' -W depend=afterany:' JobID ' ' submfilename]);
                    elseif scheduler == 2 % SLURM
                        [~,FullJobID] = system([qsub ' --depend=afterany:' JobID ' ' submfilename]);
                    end
                end
                
                SplitJobID = split(FullJobID,'.');
                JobID = SplitJobID{1};
            end
        end
        
    else
        submfilename = [WorkDir filesep JobName '.subm'];
        fidPM = fopen(submfilename,'wt');
        fwrite(fidPM,regexprep(BatchText,{'\r', '\n\n+'}',{'', '\n'}));
        fclose(fidPM);

        % Submit batch job
        cd(WorkDir)
        if Submit
            system([qsub ' ' submfilename]);
        end
    end
end

end
